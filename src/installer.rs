use crate::artisan::{Artisan, ArtisanCommand};
use crate::console::styles::bold;
use crate::db::database::DatabaseConfig;
use crate::db::smtp::SmtpConfig;
use crate::db::user::UserConfig;
use crate::{ui, utils};
use crate::utils::TrimIdentation;
use crate::console;
use std::io::Write;
use std::vec;

pub struct Installer {
    pub database_config: DatabaseConfig,
    pub user_config: UserConfig,
    pub smpt_config: SmtpConfig,
    pub locale: String,
    pub insert_example_data: bool,
    pub team_name: String,
}

impl Installer {
    pub fn init() -> Installer {
        Installer {
            database_config: DatabaseConfig::empty(),
            user_config: UserConfig::empty(),
            locale: String::from(""),
            team_name: String::from(""),
            smpt_config: SmtpConfig::empty(),
            insert_example_data: false,
        }
    }
    pub fn run(&mut self) {
        if let Err(error) = utils::validate_environment() {
            console::error(&error);
            std::process::exit(1);
        }
        
        ui::print_welcome();
        loop {
            self.database_config = ui::select_database();

            match self.database_config.ping() {
                Ok(_) => break,
                Err(error) => {
                    console::clean();
                    console::error(error.as_str());
                    console::error("Try again");
                }
            }
        }

        self.locale = ui::select_locale();
        self.user_config = ui::create_user();
        self.team_name = ui::create_team();
        self.smpt_config = ui::configure_smtp();
        self.insert_example_data = ui::ask_insert();

        self.install();
    }

    pub fn install(&self) {
        console::info("Creating .env file...");

        match self.write_dotenv() {
            Ok(_) => {
                Artisan::check_installation();
                Artisan::migrate();
                Artisan::seed();
                Artisan::create_user(&self.user_config);
                Artisan::create_team(self.team_name.as_str());
                Artisan::cmd("Setting production mode...", "php", vec!["artisan", "app:set-production"]);
                Artisan::generate_key();

                console::print(&bold("Micelab is configured. Check your .env file for additional custom configuration"));
                console::print("Make sure to have your deploy environment properly configured");
                console::print("See: https://laravel.com/docs/12.x/deployment#main-content for more information");

                console::info(
                    "NOTE: app is production mode. If you want to switch to debug mode run 'mlab env:debug'",
                );
            }
            Err(error) => console::error(error.to_string().as_str()),
        }
    }

    fn write_dotenv(&self) -> Result<(), std::io::Error> {
        let mut file = std::fs::File::create(".env")?;

        let content = format!(r#"
        # -----------------------------------
        # File generated by MiceLab installer
        # -----------------------------------
        APP_NAME=Micelab
        APP_ENV=local
        APP_KEY=
        APP_DEBUG=true
        APP_URL=http://localhost:8000
        APP_LOCALE={}
        
        LOG_CHANNEL=daily
        LOG_LEVEL=critical
        LOG_DEPRECATIONS_CHANNEL=stack
        LOG_CHANNEL=stack
        BROADCAST_DRIVER=log
        
        CACHE_DRIVER=file
        FILESYSTEM_DISK=local
        QUEUE_CONNECTION=database
        SESSION_DRIVER=database
        SESSION_LIFETIME=10080
        
        DB_CONNECTION={}
        DB_DATABASE={}
        DB_HOST={}
        DB_PORT={}
        DB_USERNAME={}
        DB_PASSWORD={}
        
        MAIL_MAILER=smtp
        MAIL_HOST={}
        MAIL_PORT={}
        MAIL_USERNAME={}
        MAIL_PASSWORD={}
        MAIL_ENCRYPTION=tls
        MAIL_FROM_ADDRESS={}
        MAIL_FROM_NAME={}
        
        EXAMPLE_INSERT={}
        
        # ----------------------
        # Custom config
        # ----------------------
        
        # AWS_ACCESS_KEY_ID=
        # AWS_SECRET_ACCESS_KEY=
        # AWS_DEFAULT_REGION=us-east-1
        # AWS_BUCKET=
        # AWS_USE_PATH_STYLE_ENDPOINT=false
        
        # PUSHER_APP_ID=
        # PUSHER_APP_KEY=
        # PUSHER_APP_SECRET=
        # PUSHER_APP_CLUSTER=mt1
        
        # MIX_PUSHER_APP_KEY="${{PUSHER_APP_KEY}}"
        # MIX_PUSHER_APP_CLUSTER="${{PUSHER_APP_CLUSTER}}"
        "#,
            self.locale,
            self.database_config.engine,
            self.database_config.database,
            self.database_config.host,
            self.database_config.port,
            self.database_config.username,
            self.database_config.password,
            self.smpt_config.host,
            self.smpt_config.port,
            self.smpt_config.username,
            self.smpt_config.password,
            self.smpt_config.from,
            if self.smpt_config.from_name.is_empty() {
                String::from(&self.team_name.replace(" ", ""))
            } else {
                String::from(&self.smpt_config.from_name)
            },
            self.insert_example_data.to_string()
        );

        file.write(&content.trim_indentation().as_bytes())
            .unwrap();

        Ok(())
    }
}
